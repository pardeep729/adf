{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "right-twix-factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DimCompany_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimCompany_Loader",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-03-11T21:52:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DimCompany_Loader')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCompany')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_datalab3_kubrick",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "dimcompany",
						"type": "int",
						"precision": 10
					},
					{
						"name": "conum",
						"type": "varchar"
					},
					{
						"name": "coname",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "StartDate",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "EndDate",
						"type": "datetime2",
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dportas",
					"table": "dimcompany"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/codata_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dportas"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "conum",
						"type": "String"
					},
					{
						"name": "coname",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCompany_Loader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "codata_files",
								"type": "DatasetReference"
							},
							"name": "codata"
						},
						{
							"dataset": {
								"referenceName": "DimCompany",
								"type": "DatasetReference"
							},
							"name": "DimCompany",
							"description": "Current rows in DimEmployees DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCompany",
								"type": "DatasetReference"
							},
							"name": "sinkNew"
						},
						{
							"dataset": {
								"referenceName": "DimCompany",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": "Close out the old version of the row"
						},
						{
							"dataset": {
								"referenceName": "DimCompany",
								"type": "DatasetReference"
							},
							"name": "sinkChanges",
							"description": "New row with changes"
						}
					],
					"transformations": [
						{
							"name": "codataWithSurrogate"
						},
						{
							"name": "DoesRowExist"
						},
						{
							"name": "RowHasChanged"
						},
						{
							"name": "codataWithDates"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tconum as string,\n\t\tconame as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.*']) ~> codata\nsource(output(\n\t\tdimcompany as integer,\n\t\tconum as string,\n\t\tconame as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCompany\ncodata, DimCompany lookup(codata@conum == DimCompany@conum,\n\tmultiple: false,\n\tpickup: 'first',\n\tdesc(EndDate, true),\n\tbroadcast: 'auto')~> codataWithSurrogate\ncodataWithDates split(isNull(dimcompany),\n\tdisjoint: false) ~> DoesRowExist@(NewRow, CurrentRow)\nDoesRowExist@CurrentRow, DimCompany exists(DoesRowExist@CurrentRow@dimcompany == DimCompany@dimcompany\n\t&& DoesRowExist@CurrentRow@conum == DimCompany@conum\n\t&& DoesRowExist@CurrentRow@coname == DimCompany@coname\n\t&& DoesRowExist@CurrentRow@city == DimCompany@city\n\t&& DoesRowExist@CurrentRow@country == DimCompany@country,\n\tnegate:true,\n\tbroadcast: 'auto')~> RowHasChanged\ncodataWithSurrogate derive(StartDate = currentTimestamp(),\n\t\tEndDate = toTimestamp(\"9999-12-31 23:59:59\"),\n\t\tRowStatusNew = \"NEW\",\n\t\tRowStatusChange = \"CHANGE\") ~> codataWithDates\nRowHasChanged alterRow(updateIf(1==1)) ~> AlterRow1\nDoesRowExist@NewRow sink(input(\n\t\tdimcompany as integer,\n\t\tconum as string,\n\t\tconame as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tconum = DoesRowExist@NewRow@conum,\n\t\tconame = DoesRowExist@NewRow@coname,\n\t\tcity = DoesRowExist@NewRow@city,\n\t\tstate = DoesRowExist@NewRow@state,\n\t\tcountry = DoesRowExist@NewRow@country,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tpartitionBy('roundRobin', 4),\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkNew\nAlterRow1 sink(input(\n\t\tdimcompany as integer,\n\t\tconum as string,\n\t\tconame as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['dimcompany'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tdimcompany,\n\t\tEndDate = StartDate\n\t),\n\tpartitionBy('roundRobin', 4),\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkInactive\nRowHasChanged sink(input(\n\t\tdimcompany as integer,\n\t\tconum as string,\n\t\tconame as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tconum = DoesRowExist@CurrentRow@conum,\n\t\tconame = DoesRowExist@CurrentRow@coname,\n\t\tcity = DoesRowExist@CurrentRow@city,\n\t\tstate = DoesRowExist@CurrentRow@state,\n\t\tcountry = DoesRowExist@CurrentRow@country,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkChanges"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/codata_files')]",
				"[concat(variables('factoryId'), '/datasets/DimCompany')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProductCategory_Loader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesLT_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "sourcetable"
						},
						{
							"dataset": {
								"referenceName": "DimProductCategory",
								"type": "DatasetReference"
							},
							"name": "sinktable",
							"description": "Current rows in DimProductCategory DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimProductCategory",
								"type": "DatasetReference"
							},
							"name": "sinkNew"
						},
						{
							"dataset": {
								"referenceName": "DimProductCategory",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": "Close out the old version of the row"
						},
						{
							"dataset": {
								"referenceName": "DimProductCategory",
								"type": "DatasetReference"
							},
							"name": "sinkChanges",
							"description": "New row with changes"
						}
					],
					"transformations": [
						{
							"name": "sourceWithSurrogate"
						},
						{
							"name": "DoesRowExist"
						},
						{
							"name": "RowHasChanged"
						},
						{
							"name": "codataWithDates"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tProductCategoryID as integer,\n\t\tParentProductCategoryID as integer,\n\t\tName as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\twildcardPaths:['*.*']) ~> sourcetable\nsource(output(\n\t\tProductCategory as integer,\n\t\tname as string,\n\t\tParentProductCategoryID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sinktable\nsourcetable, sinktable lookup(sourcetable@ParentProductCategoryID == sinktable@ParentProductCategoryID,\n\tmultiple: false,\n\tpickup: 'first',\n\tdesc(EndDate, true),\n\tbroadcast: 'auto')~> sourceWithSurrogate\ncodataWithDates split(isNull(ProductCategory),\n\tdisjoint: false) ~> DoesRowExist@(NewRow, CurrentRow)\nDoesRowExist@CurrentRow, sinktable exists(ProductCategoryID == sinktable@ProductCategory\n\t&& DoesRowExist@CurrentRow@Name == sinktable@name\n\t&& DoesRowExist@CurrentRow@ParentProductCategoryID == sinktable@ParentProductCategoryID,\n\tnegate:true,\n\tbroadcast: 'auto')~> RowHasChanged\nsourceWithSurrogate derive(StartDate = currentTimestamp(),\n\t\tEndDate = toTimestamp(\"9999-12-31 23:59:59\"),\n\t\tRowStatusNew = \"NEW\",\n\t\tRowStatusChange = \"CHANGE\") ~> codataWithDates\nRowHasChanged alterRow(updateIf(1==1)) ~> AlterRow1\nDoesRowExist@NewRow sink(input(\n\t\tProductCategory as integer,\n\t\tname as string,\n\t\tParentProductCategoryID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tProductCategory = ProductCategoryID,\n\t\tname = DoesRowExist@NewRow@Name,\n\t\tParentProductCategoryID = DoesRowExist@NewRow@ParentProductCategoryID,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tpartitionBy('roundRobin', 4),\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkNew\nAlterRow1 sink(input(\n\t\tProductCategory as integer,\n\t\tname as string,\n\t\tParentProductCategoryID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ProductCategory'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tProductCategory = ProductCategoryID,\n\t\tEndDate = StartDate\n\t),\n\tpartitionBy('roundRobin', 4),\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkInactive\nRowHasChanged sink(input(\n\t\tProductCategory as integer,\n\t\tname as string,\n\t\tParentProductCategoryID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tProductCategory = ProductCategoryID,\n\t\tname = DoesRowExist@CurrentRow@Name,\n\t\tParentProductCategoryID = DoesRowExist@CurrentRow@ParentProductCategoryID,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkChanges"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesLT_ProductCategory')]",
				"[concat(variables('factoryId'), '/datasets/DimProductCategory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProductCategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_datalab3_kubrick",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductCategory",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "ParentProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StartDate",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "EndDate",
						"type": "datetime2",
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "pardoop",
					"table": "dimProductCategory"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesLT_ProductCategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_datalab3_kubrick",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ParentProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "ProductCategory"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProductCategory_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimProductCategory_Loader",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-03-11T21:52:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DimProductCategory_Loader')]"
			]
		}
	]
}